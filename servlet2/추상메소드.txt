1. 추상메소드 : 메소드의 설계도
- 부모 클래스는 메소드의 이름을 정해준다.
  자식 클래스는 부모가 정해준 메소드를 오버라이드한다..
   부모가 추상메소드 형식으로 자식에게 메소드 구현을 강제한다.
   - Object, HttpServlet는 추상 메소드를 사용하지 않는다. -> 선택
   -Object의 메소드 : equals, toString...
   
  2. 추상 클래스 
  - 추상 메소드를 가지는 클래스(표준에 해당하는 부모 클래스)
  - 객체를 생성할 수 없고 abstract 키워드를 사용하지 않을 경우 오류 발생
  
  3. 인터페이스(interface) -> 설계도만 가지고 있다. 
  - 추상 메소드"만" 가지는 클래스의 변종 
  - extends 대신 implements를 사용
  
  4. 웹서버 : 정적인 요청 처리 
  - 사용자는 요청을 웹서버에 보낸다.
  - 웹서버는 요청을 접수한 다음 html, css, js, 이미지등을 담은 응답을 사용자에게 보낸다. 
  
  
  5. WAS : 동적으로 html 생성
  - 사용자는 요청을 웹서버로 보낸다. 
  - 웹서버는 정적인 요청(html, css....)인 경우 직접 응답
  	동적인 요청인 경우 WAS로 요청을 전달
 - 요청을 전달받은 WAS는 자바 프로그램(서블릿)을 실행해 html을 생성 후 웹서버에 전달 
 - 웹서버가 응답
 
  6 . 서블릿(Servlet)
  - 웹서버에서 실행되는 자바 클래스 표준
  - get 방식 요청에 응답하는 doGet()
  -post 방식 요청에 응답하는 doPost()
  - 응답을 html로 출력한다. -> 프론트는 할일 X
  
  7. forward와 redirect 
  - MVC에서 하나의 작업(하나의 주소)는 컨트롤러와 여러개의 뷰로 구성
  - 하나의 작업을 구성하는 여러개의 뷰 중 적절한 뷰를 보여주는 것 : forward  -> 이동X 
  		-> 하나의 작업 내부에서 이동 
  		-> request가 이어진다.
  		-> 주소가 바뀌지 않는다. 
  		
  - 새로운 작업으로 이동 : redirect 
  - request가 파괴되고 새로 만들어진다. 
  - 주소가 바뀐다. 
  
  8. 사용자 정보를 저장하는 서버의 공간 
  - cookie : 사용자 정보를 사용자 컴퓨터에 저장
  - request : 사용자 정보를 서버에 저장(주소가 바뀌면 파괴)
  - session : 사용자 정보를 서버에 저장(일정시간 동안 접근하지 않으면 파괴)
  - db : 삭제할 때 저장 
  
  